[
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    },
    {
        "meta_data": {
            "dataset": "NeoCoder",
            "id": "1700A",
            "eval_func": null
        },
        "input": {
            "text": "A. Optimal Path\nYou are given a table $$$a$$$ of size $$$n \\times m$$$. We will consider the table rows numbered from top to bottom from $$$1$$$ to $$$n$$$, and the columns numbered from left to right from $$$1$$$ to $$$m$$$. We will denote a cell that is in the $$$i$$$-th row and in the $$$j$$$-th column as $$$(i, j)$$$. In the cell $$$(i, j)$$$ there is written a number $$$(i - 1) \\cdot m + j$$$, that is $$$a_{ij} = (i - 1) \\cdot m + j$$$.\nA turtle initially stands in the cell $$$(1, 1)$$$ and it wants to come to the cell $$$(n, m)$$$. From the cell $$$(i, j)$$$ it can in one step go to one of the cells $$$(i + 1, j)$$$ or $$$(i, j + 1)$$$, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with $$$n = 2$$$ and $$$m = 3$$$ the table will look as shown above. The turtle can take the following path: $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3)$$$. The cost of such way is equal to $$$a_{11} + a_{12} + a_{13} + a_{23} = 12$$$. On the other hand, the paths $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 1)$$$ and $$$(1, 1) \\rightarrow (1, 3)$$$ are incorrect, because in the first path the turtle can't make a step $$$(2, 2) \\rightarrow (2, 1)$$$, and in the second path it can't make a step $$$(1, 1) \\rightarrow (1, 3)$$$.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$. Please note that the cells $$$(1, 1)$$$ and $$$(n, m)$$$ are a part of the way.\nInput\nThe first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) \u2014 the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^4$$$) \u2014 the number of rows and columns of the table $$$a$$$ respectively.\nOutput\nFor each test case output a single integer \u2014 a minimal possible cost of a path from the cell $$$(1, 1)$$$ to the cell $$$(n, m)$$$.\nExample\nInput\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\nOutput\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell $$$(1, 1)$$$.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from $$$(1, 1)$$$ to $$$(n, m)$$$. Both paths visit every cell in the table.",
            "file": null,
            "others": {
                "constraints": [
                    [
                        "this is the og problem"
                    ],
                    [
                        "matrix operation"
                    ],
                    [
                        "matrix operation",
                        "for loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop"
                    ],
                    [
                        "matrix operation",
                        "for loop",
                        "tuple",
                        "while loop",
                        "if statement"
                    ]
                ],
                "instructions": {
                    "system": "You are a Python code generator, only return the import and python function.\nInput will be an very detailed description of task, output will be the code.\nThe input will be from command line, and the output will be printed to the\nconsole as well. Your result will be solely a function named solve(), and\ndo not call this function in your code. Make sure the code is free of bug\nand can pass the test cases provided. You can use any library you want. The\ntest cases are provided in the code. Do not call the solve() function in\nyour code.",
                    "user": "Programming constraints: Do not use the following techniques: {constraints}.\n{question}"
                },
                "references": {
                    "human_solutions": [
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop",
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "while loop"
                        ],
                        [
                            "for loop",
                            "tuple",
                            "matrix operation"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ],
                        [
                            "for loop",
                            "tuple"
                        ]
                    ],
                    "test_cases": {
                        "input": [
                            [
                                [
                                    "1",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "2",
                                    "3"
                                ]
                            ],
                            [
                                [
                                    "3",
                                    "2"
                                ]
                            ],
                            [
                                [
                                    "7",
                                    "1"
                                ]
                            ],
                            [
                                [
                                    "1",
                                    "10"
                                ]
                            ],
                            [
                                [
                                    "5",
                                    "5"
                                ]
                            ],
                            [
                                [
                                    "10000",
                                    "10000"
                                ]
                            ]
                        ],
                        "output": [
                            "1",
                            "12",
                            "13",
                            "28",
                            "55",
                            "85",
                            "500099995000"
                        ]
                    }
                }
            }
        },
        "output": null
    }
]